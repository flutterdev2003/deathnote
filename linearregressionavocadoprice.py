"""LinearRegressionAvocadoPrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16geBINf3ODXfpiAowFOpIFuXV70VoP2m
"""

import numpy as np # used for handling numbers
import pandas as pd # used for handling the dataset
from sklearn.impute import SimpleImputer # used for handling missing data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder # used for encoding categorical data
from sklearn.model_selection import train_test_split # used for splitting training and testing data
from sklearn.preprocessing import StandardScaler # used for feature scaling mean values
from sklearn.preprocessing import Normalizer # used for feature scaling min max values
from datetime import datetime

dataset = pd.read_csv('avocado.csv')
X = dataset.drop([dataset.columns[0],'AveragePrice'], axis = 1) #all columns except index column and Average price
X['Date'] = pd.to_datetime(X['Date'])
Y = dataset.AveragePrice

print(X)

print(Y)

"""Null Values"""

X.isnull().sum()

"""Converting categorial info"""

labelencoder_X = LabelEncoder()
X.iloc[:, 0] = labelencoder_X.fit_transform(X.iloc[:, 0])
X.iloc[:, -1] = labelencoder_X.fit_transform(X.iloc[:, -1])
X.iloc[:, 10] = labelencoder_X.fit_transform(X.iloc[:, 10])
X.iloc[:, 9] = labelencoder_X.fit_transform(X.iloc[:, 9])

print(X)

print(X)

dataset.region.unique()

X.region.dtype

Xdata= pd.DataFrame(X)

"""Encoding categorial columns"""

from sklearn.compose import ColumnTransformer

ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [9,10])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X.shape)
print(X)

"""Saving as CSV"""

Xd = pd.DataFrame(X)
Yd = pd.DataFrame(Y)
Xd.to_csv('Xavo.csv')
Yd.to_csv('Yavo.csv')

"""Datapreprocessing"""

X=pd.read_csv('/content/Xavo.csv')
Y=pd.read_csv('/content/Yavo.csv')

sc1= StandardScaler()
X.iloc[:,7:] = sc1.fit_transform(X.iloc[:,7:])
X.iloc[:,:6] = sc1.fit_transform(X.iloc[:,:6])

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

y_train

import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
clf1 = LinearRegression()
clf1.fit(X_train, y_train)

clf1.score(X_test,y_test)

import seaborn as sns
y=dataset['AveragePrice']
# for i in range(0,12):
#   sns.regplot(Xdata[Xdata.columns[i]], y, ci=None)

sns.regplot(Xdata[Xdata.columns[0]], y, ci=None,scatter_kws={"color": "red"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[1]], y, ci=None)

sns.regplot(Xdata[Xdata.columns[2]], y, ci=None,scatter_kws={"color": "green"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[3]], y, ci=None,scatter_kws={"color": "yellow"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[4]], y, ci=None,scatter_kws={"color": "red"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[5]], y, ci=None,scatter_kws={"color": "blue"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[6]], y, ci=None,scatter_kws={"color": "orange"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[7]], y, ci=None,scatter_kws={"color": "green"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[8]], y, ci=None,scatter_kws={"color": "red"}, line_kws={"color": "black"})

sns.regplot(Xdata[Xdata.columns[9]], y, ci=None,scatter_kws={"color": "blue"}, line_kws={"color": "red"})

sns.regplot(Xdata[Xdata.columns[10]], y, ci=None,scatter_kws={"color": "violet"}, line_kws={"color": "red"})

sns.regplot(Xdata[Xdata.columns[11]], y, ci=None,scatter_kws={"color": "yellow"}, line_kws={"color": "red"})

corr = X.corr()
corr

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
plt.figure(figsize=(10,10))
sns.heatmap(corr,annot=True,cmap='RdYlGn')

# Xcorr = X.iloc[:,1:]
# for i in range(8,16):
#   Xcorr=Xcorr.drop(X.columns[i], axis = 1)
Xtraincorr, Xtestcorr, ytraincorr, ytestcorr = train_test_split(X, Y, test_size = 0.2, random_state = 42)
Xtraincorr

def correlation(dataset,threshold):
  col_corr = set()
  corr_matrix = dataset.corr()
  for i in range(len(corr_matrix.columns)):
    for j in range(i):
      if abs(corr_matrix.iloc[i,j])>threshold:
        colname = corr_matrix.columns[i]
        col_corr.add(colname)
  return col_corr

corr_features = correlation(X,0.9)
len(set(corr_features))
print("correlated features : ",len(set(corr_features)))

xtrainnoncorr=Xtraincorr.drop(corr_features,axis=1)

xtestnoncorr=Xtestcorr.drop(corr_features,axis=1)

print("correlated features are : ",corr_features)

ytraincorr

clf2 = LinearRegression()
clf2.fit(xtrainnoncorr, ytraincorr)



clf2.score(xtestnoncorr,ytestcorr)